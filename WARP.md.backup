# WARP.md

This file provides guidance to WARP (warp.dev) when working with code in this repository.

## Project Overview

**Master Aesthetics Suite** is a comprehensive single-tenant business management platform specifically designed for LEA Aesthetics Clinical Academy. It combines practice management, client booking, payment processing, and an integrated Learning Management System (LMS) for education and certification.

### System Architecture

This is a **single Next.js application** with the following key characteristics:
- **Single-tenant business suite** for LEA Aesthetics Clinical Academy
- **Integrated platform**: Practice management + Client portal + Student LMS + Business analytics  
- **Technology stack**: Next.js 15, Supabase, Stripe, TypeScript, TailwindCSS, Framer Motion
- **Deployment**: Single unified platform on Vercel

## Development Commands

### Development Server
```bash
# Start the Master Aesthetics Suite platform
pnpm dev

# Start with specific port (default: 3000)
PORT=3000 pnpm dev
```

### Database Operations (Legacy Prisma - Currently unused)
```bash
# Generate Prisma client (for legacy schema reference only)
pnpm db:generate

# Run database migrations (for legacy schema reference only)
pnpm db:migrate

# Seed database with sample data (for legacy schema reference only)
pnpm db:seed
```

### Building and Testing
```bash
# Build the platform
pnpm build

# Lint codebase
pnpm lint

# Format code
pnpm format

# Run E2E tests
pnpm test:e2e:playwright
```

## High-Level Architecture

### Single-Tenant Structure
The Master Aesthetics Suite is designed for LEA Aesthetics Clinical Academy as a single-tenant solution with:

1. **Unified Data Model**: All data belongs to LEA Aesthetics - no tenant isolation needed
2. **Role-Based Access Control (RBAC)**: User roles for OWNER, PRACTITIONER, STUDENT, CLIENT access levels
3. **Supabase-Native Authentication**: Row Level Security (RLS) policies for data access control

### Core Domain Models

#### Practice Management
- **Appointments**: Booking system with availability engine
- **Clients**: Customer profiles with medical history
- **Practitioners**: Provider profiles with specialties and availability
- **Services**: Treatment offerings with pricing and duration
- **Payments**: Stripe integration for deposits and full payments
- **Documents**: Legal document generation with e-signature support

#### Learning Management System (LMS)
- **Courses**: Multi-level training programs (Level 2, 3, 4)
- **Modules & Lessons**: Structured educational content
- **Assessments**: Quizzes and examinations with grading
- **Enrollments**: Student progress tracking
- **Certificates**: Digital certification issuance

### Authentication & Authorization
- **JWT-based authentication** with refresh tokens
- **External auth providers** (Auth0/Clerk) planned
- **Comprehensive RBAC** with permission matrices
- **Multi-tenant user management** with role assignments per tenant

### Data Layer (Prisma Schema)
The database schema is comprehensive and production-ready with:
- **Multi-tenant isolation** (tenantId fields)
- **Comprehensive business models** for both domains
- **Proper relationships** and constraints
- **Audit trails** and versioning for critical data

### API Structure (NestJS)
- **Domain-driven design** with separate modules
- **Swagger documentation** auto-generated
- **Global middleware** for tenant scoping and authentication
- **Rate limiting** and security headers configured
- **Comprehensive error handling** with global exception filters

### Frontend Applications
- **Web App** (`apps/web`): Tenant websites, booking portal, client portal
- **Admin App** (`apps/admin`): Backoffice management for tenants
- **Shared UI** (`packages/ui`): Design system components
- **Maerose Brand System**: Luxury aesthetic theme with precise design tokens

## Package Structure

### Applications (`apps/`)
- `api/`: NestJS backend API with comprehensive business logic
- `web/`: Next.js 15 tenant-facing application with booking system
- `admin/`: Next.js 15 admin dashboard for practice management
- `worker/`: Background job processing (BullMQ)

### Packages (`packages/`)
- `ui/`: Shared React component library with Maerose design system
- `db/`: Prisma schema and database utilities
- `shared/`: TypeScript types, validation schemas, utilities
- `ai/`: AI orchestration and content generation services
- `sdk/`: Partner/third-party SDK
- `tsconfig/`: Shared TypeScript configurations

## Configuration Management

### Environment Variables
The system uses environment-specific configuration:
- **Development**: `.env.local` files in each app
- **Production**: Environment variables via deployment platforms

### Database Configuration
**Current Setup**: PostgreSQL with the following services:
- **Database**: `postgresql://irwell_user:irwell_secure_password_2024@localhost:55433/irwell_hospitality`
- **Redis**: `localhost:6379` for caching and job queues
- **MeiliSearch**: `localhost:7700` for search functionality

### Docker Services
The `docker-compose.yml` defines development infrastructure:
- PostgreSQL 16 (port 55433)
- Redis 7 (port 6379) 
- MeiliSearch v1.7 (port 7700)

## Development Patterns

### Multi-Tenant Development
When working with tenant-scoped features:
1. **Always use tenant context** - Data should be automatically scoped by middleware
2. **Respect role permissions** - Check RBAC before operations
3. **Use Prisma middleware** - Automatic tenant filtering is configured

### API Development
- **Use NestJS decorators** for routing and validation
- **Implement proper DTOs** with class-validator
- **Add Swagger documentation** using decorators
- **Follow domain-driven structure** - group related functionality

### Frontend Development
- **Use shared UI components** from `packages/ui`
- **Follow Maerose design system** - luxury aesthetic with specific color palette
- **Implement responsive design** - mobile-first approach
- **Use Next.js 15 features** - App Router and React Server Components

## Critical Implementation Details

### Booking Engine
The availability system is sophisticated with:
- **Multi-practitioner support** with individual schedules
- **Service-specific buffers** (prep/cleanup time)
- **Location-based availability** across multiple sites
- **Real-time conflict detection** and slot calculation

### Document Management
Legal compliance features include:
- **Template versioning** with jurisdiction-specific content
- **Mandatory block validation** for legal requirements
- **Cryptographic stamping** for document integrity
- **E-signature workflow** integration planned

### Payment Processing
Stripe integration supports:
- **Deposit workflows** with final payment collection
- **Webhook handling** with idempotency
- **Multi-tenant payment isolation**
- **Refund and dispute management**

### Brand Implementation (Maerose)
The luxury aesthetic follows strict brand guidelines:
- **Color palette**: Primary Noir (#1A1A1A), Champagne Gold (#C5A880), Ivory White (#FFFFFF)
- **Typography**: Inter font family with specific sizing scales
- **Animation**: Smooth, deliberate interactions (300ms standard)
- **Spacing**: Generous whitespace with systematic spacing scale

## Current Development Status

### Implemented (‚âà50%)
- ‚úÖ Monorepo structure with proper tooling
- ‚úÖ Comprehensive database schema
- ‚úÖ Basic API controllers and services
- ‚úÖ Authentication system foundation
- ‚úÖ Frontend applications scaffolded
- ‚úÖ Docker development environment

### In Progress
- üîÑ Multi-tenant middleware completion
- üîÑ Production-ready booking engine
- üîÑ Payment integration finalization
- üîÑ Document generation system
- üîÑ LMS content delivery

### Planned
- ‚ùå Production deployment infrastructure
- ‚ùå Comprehensive testing coverage
- ‚ùå Performance optimization
- ‚ùå AI-powered features
- ‚ùå Advanced search integration

## Common Development Tasks

### Adding New Features
1. **API**: Create controller/service in appropriate domain module
2. **Database**: Add Prisma model updates with proper tenant scoping
3. **Frontend**: Use shared UI components and follow Maerose design system
4. **Types**: Update shared types in `packages/shared`

### Testing Individual Components
```bash
# Test specific API endpoints
pnpm --filter api test

# Test database operations
pnpm db:migrate && pnpm db:seed

# Test frontend components  
pnpm --filter web dev
```

### Debugging Multi-Tenant Issues
1. Check tenant middleware is properly configured
2. Verify JWT token contains correct tenant claims
3. Ensure Prisma queries include tenant scoping
4. Review role-based permission checks

## Integration Points

### External Services
- **Stripe**: Payment processing and webhook handling
- **Auth0/Clerk**: External authentication (planned)
- **SendGrid**: Email notifications
- **Vercel Blob**: File storage
- **Railway**: API deployment

### API Documentation
- **Swagger UI**: Available at `http://localhost:3333/api/docs` in development
- **Comprehensive tags**: Authentication, Users, Services, Appointments, Payments, Documents

## Performance Considerations

### Database Optimization
- **Tenant-scoped indexes** for performance
- **Proper foreign key relationships** with cascade deletes
- **Connection pooling** configured via Prisma

### Frontend Performance
- **Next.js 15 optimizations** with App Router
- **Shared component caching** via Turborepo
- **Image optimization** for luxury brand assets

## Security Features

### API Security
- **Helmet.js** for security headers
- **Rate limiting** via Throttler
- **CORS** configuration for allowed origins
- **Input validation** with class-validator
- **JWT authentication** with refresh tokens

### Data Protection
- **Row-level security** for tenant isolation
- **Encrypted sensitive data** via Prisma
- **Audit trails** for critical operations
- **GDPR compliance** considerations

## Brand Guidelines Integration

The Maerose aesthetic is deeply integrated into the codebase:
- **Design tokens** defined in Tailwind configuration
- **Component library** follows strict brand standards
- **Animation guidelines** ensure luxury feel
- **Accessibility compliance** (WCAG 2.2 AA)

When developing UI components, always reference the technical implementation guide in `Maerose/TECHNICAL_IMPLEMENTATION_GUIDE.md` for precise specifications.

## Known Issues & Workarounds

### Development Environment
- **Port conflicts**: Ensure Docker services are running on correct ports
- **Database connection**: Verify connection string matches docker-compose configuration
- **PNPM caching**: Use `pnpm install --frozen-lockfile=false` if lockfile issues arise

### Build Issues
- **TypeScript strict mode**: Project uses strict TypeScript configuration
- **Workspace dependencies**: Use `workspace:*` for internal package references
- **Turborepo caching**: May need to clear cache with `pnpm turbo clean` if builds fail
