// LEA Aesthetics - MVP Database Schema
// Simplified for immediate business use

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE USER MANAGEMENT
// ==========================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String
  lastName      String
  phone         String?
  password      String?  // For MVP, will move to external auth later
  roles         Role[]   @default([CLIENT])
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  practitionerProfile PractitionerProfile?
  educatorProfile     EducatorProfile?
  bookings           Booking[]
  enrollments        Enrollment[]
  payments           Payment[]
  
  @@map("users")
}

enum Role {
  PRACTITIONER
  EDUCATOR
  CLIENT
  STUDENT
  ADMIN
}

model PractitionerProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  title        String?  // Dr., RN, etc.
  bio          String?
  specialties  String[] // Array of specialties
  isActive     Boolean  @default(true)
  
  // Business Settings
  workingHours Json     @default("{\"monday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"tuesday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"wednesday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"thursday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"friday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"saturday\":{\"start\":\"09:00\",\"end\":\"15:00\",\"available\":false},\"sunday\":{\"start\":\"09:00\",\"end\":\"15:00\",\"available\":false}}")
  bufferTime   Int      @default(15) // Minutes between appointments
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  treatments   Treatment[]
  bookings     Booking[]
  
  @@map("practitioner_profiles")
}

model EducatorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  title       String?  // Professor, Trainer, etc.
  bio         String?
  expertise   String[] // Array of expertise areas
  isActive    Boolean  @default(true)
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses     Course[]
  
  @@map("educator_profiles")
}

// ==========================================
// AESTHETIC TREATMENTS & BOOKINGS
// ==========================================

model Treatment {
  id              String   @id @default(cuid())
  practitionerId  String
  name            String
  description     String?
  duration        Int      // Duration in minutes
  price           Int      // Price in pence (Â£25.00 = 2500)
  depositRequired Boolean  @default(true)
  depositAmount   Int?     // If null, default to 50% of price
  category        String   // Facial, Injectable, Laser, etc.
  isActive        Boolean  @default(true)
  
  // Booking Requirements
  requiresConsultation Boolean @default(false)
  minimumAge          Int?
  aftercareRequired   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  practitioner PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  
  @@map("treatments")
}

model Booking {
  id             String        @id @default(cuid())
  clientId       String
  practitionerId String
  treatmentId    String
  
  // Booking Details
  dateTime       DateTime
  duration       Int           // Duration in minutes
  status         BookingStatus @default(PENDING_DEPOSIT)
  
  // Client Information
  clientName     String
  clientEmail    String
  clientPhone    String
  notes          String?
  
  // Payment Information
  totalAmount    Int           // Total price in pence
  depositAmount  Int           // Deposit amount in pence
  depositPaid    Boolean       @default(false)
  balancePaid    Boolean       @default(false)
  
  // Booking Management
  confirmationCode String?     @unique
  remindersSent   Int         @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  client       User                @relation(fields: [clientId], references: [id], onDelete: Restrict)
  practitioner PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Restrict)
  treatment    Treatment           @relation(fields: [treatmentId], references: [id], onDelete: Restrict)
  payments     Payment[]
  
  @@map("bookings")
}

enum BookingStatus {
  PENDING_DEPOSIT
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// ==========================================
// EDUCATION & COURSES
// ==========================================

model Course {
  id            String   @id @default(cuid())
  educatorId    String
  
  // Course Details
  title         String
  description   String?
  level         String   // Level 2, Level 3, Level 4
  category      String   // Anatomy, Safety, Treatments
  duration      Int      // Estimated hours
  price         Int      // Price in pence
  
  // Course Content
  curriculum    Json     // Course modules and lessons structure
  requirements  String[] // Prerequisites
  outcomes      String[] // Learning outcomes
  
  // Settings
  maxStudents   Int      @default(20)
  isPublished   Boolean  @default(false)
  isActive      Boolean  @default(true)
  
  // Certification
  certificateTemplate String?
  passingScore       Int     @default(70)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  educator    EducatorProfile @relation(fields: [educatorId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  
  @@map("courses")
}

model Enrollment {
  id           String           @id @default(cuid())
  studentId    String
  courseId     String
  
  // Enrollment Details
  status       EnrollmentStatus @default(ENROLLED)
  progress     Int              @default(0) // Percentage completed
  startDate    DateTime         @default(now())
  completionDate DateTime?
  
  // Assessment
  finalScore   Int?
  passed       Boolean         @default(false)
  certificateIssued Boolean    @default(false)
  certificateUrl    String?
  
  // Payment
  amountPaid   Int             // Amount paid in pence
  paymentComplete Boolean      @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  student   User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payments  Payment[]
  
  @@unique([studentId, courseId])
  @@map("enrollments")
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  DROPPED
  SUSPENDED
}

// ==========================================
// PAYMENTS
// ==========================================

model Payment {
  id             String        @id @default(cuid())
  userId         String
  
  // Payment Details
  amount         Int           // Amount in pence
  currency       String        @default("gbp")
  status         PaymentStatus
  type           PaymentType
  
  // Stripe Integration
  stripePaymentIntentId String? @unique
  stripeChargeId        String? @unique
  
  // Linked Records
  bookingId      String?
  enrollmentId   String?
  
  // Metadata
  description    String
  metadata       Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  booking    Booking?    @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)
  
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  BOOKING_DEPOSIT
  BOOKING_BALANCE
  COURSE_PAYMENT
  REFUND
}

// ==========================================
// SYSTEM SETTINGS
// ==========================================

model SystemSetting {
  id          String @id @default(cuid())
  key         String @unique
  value       Json
  description String?
  updatedAt   DateTime @updatedAt
  
  @@map("system_settings")
}
