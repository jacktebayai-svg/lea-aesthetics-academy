// LEA Aesthetics - MVP Database Schema
// Simplified for immediate business use

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE USER MANAGEMENT
// ==========================================

model AppUser {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String
  lastName      String
  phone         String?
  password      String?  // For MVP, will move to external auth later
  roles         Role[]   @default([CLIENT])
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  practitionerProfile PractitionerProfile?
  educatorProfile     EducatorProfile?
  clientProfile       ClientProfile?
  bookings           Booking[]
  enrollments        Enrollment[]
  payments           Payment[]
  
  // Document relations
  clientDocuments    Document[]           @relation("ClientDocuments")
  
  // Learning relations
  assessmentAttempts AssessmentAttempt[]  @relation("StudentAssessments")
  lessonProgress     LessonProgress[]     @relation("StudentProgress")
  
  // Notification relations
  notifications      Notification[]       @relation("UserNotifications")
  
  // Audit relations
  auditLogs          AuditLog[]           @relation("UserAudits")
  
  @@map("app_users")
}

enum Role {
  PRACTITIONER
  EDUCATOR
  CLIENT
  STUDENT
  ADMIN
}

model PractitionerProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  title        String?  // Dr., RN, etc.
  bio          String?
  specialties  String[] // Array of specialties
  isActive     Boolean  @default(true)
  
  // Business Settings
  workingHours Json     @default("{\"monday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"tuesday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"wednesday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"thursday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"friday\":{\"start\":\"09:00\",\"end\":\"17:00\",\"available\":true},\"saturday\":{\"start\":\"09:00\",\"end\":\"15:00\",\"available\":false},\"sunday\":{\"start\":\"09:00\",\"end\":\"15:00\",\"available\":false}}")
  bufferTime   Int      @default(15) // Minutes between appointments
  
  // Relations
  user         AppUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  treatments   Treatment[]
  bookings     Booking[]
  schedules    Schedule[]
  scheduleExceptions ScheduleException[]
  
  @@map("practitioner_profiles")
}

model EducatorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  title       String?  // Professor, Trainer, etc.
  bio         String?
  expertise   String[] // Array of expertise areas
  isActive    Boolean  @default(true)
  
  // Relations
  user        AppUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses     Course[]
  
  @@map("educator_profiles")
}

// ==========================================
// AESTHETIC TREATMENTS & BOOKINGS
// ==========================================

model Treatment {
  id              String   @id @default(cuid())
  practitionerId  String
  name            String
  description     String?
  duration        Int      // Duration in minutes
  price           Int      // Price in pence (Â£25.00 = 2500)
  depositRequired Boolean  @default(true)
  depositAmount   Int?     // If null, default to 50% of price
  category        String   // Facial, Injectable, Laser, etc.
  isActive        Boolean  @default(true)
  
  // Booking Requirements
  requiresConsultation Boolean @default(false)
  minimumAge          Int?
  aftercareRequired   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  practitioner PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  riskAssessments RiskAssessment[]
  
  @@map("treatments")
}

model Booking {
  id             String        @id @default(cuid())
  clientId       String
  practitionerId String
  treatmentId    String
  
  // Booking Details
  dateTime       DateTime
  duration       Int           // Duration in minutes
  status         BookingStatus @default(PENDING_DEPOSIT)
  
  // Client Information
  clientName     String
  clientEmail    String
  clientPhone    String
  notes          String?
  
  // Payment Information
  totalAmount    Int           // Total price in pence
  depositAmount  Int           // Deposit amount in pence
  depositPaid    Boolean       @default(false)
  balancePaid    Boolean       @default(false)
  
  // Booking Management
  confirmationCode String?     @unique
  remindersSent   Int         @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  client       AppUser             @relation(fields: [clientId], references: [id], onDelete: Restrict)
  practitioner PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Restrict)
  treatment    Treatment           @relation(fields: [treatmentId], references: [id], onDelete: Restrict)
  payments     Payment[]
  documents    Document[]
  treatmentPhotos TreatmentPhoto[]
  
  @@map("bookings")
}

enum BookingStatus {
  PENDING_DEPOSIT
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// ==========================================
// EDUCATION & COURSES
// ==========================================

model Course {
  id            String   @id @default(cuid())
  educatorId    String
  
  // Course Details
  title         String
  description   String?
  level         String   // Level 2, Level 3, Level 4
  category      String   // Anatomy, Safety, Treatments
  duration      Int      // Estimated hours
  price         Int      // Price in pence
  
  // Course Content
  curriculum    Json     // Course modules and lessons structure
  requirements  String[] // Prerequisites
  outcomes      String[] // Learning outcomes
  
  // Settings
  maxStudents   Int      @default(20)
  isPublished   Boolean  @default(false)
  isActive      Boolean  @default(true)
  
  // Certification
  certificateTemplate String?
  passingScore       Int     @default(70)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  educator    EducatorProfile @relation(fields: [educatorId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  modules     Module[]
  
  @@map("courses")
}

model Enrollment {
  id           String           @id @default(cuid())
  studentId    String
  courseId     String
  
  // Enrollment Details
  status       EnrollmentStatus @default(ENROLLED)
  progress     Int              @default(0) // Percentage completed
  startDate    DateTime         @default(now())
  completionDate DateTime?
  
  // Assessment
  finalScore   Int?
  passed       Boolean         @default(false)
  certificateIssued Boolean    @default(false)
  certificateUrl    String?
  
  // Payment
  amountPaid   Int             // Amount paid in pence
  paymentComplete Boolean      @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  student   AppUser @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payments  Payment[]
  
  @@unique([studentId, courseId])
  @@map("enrollments")
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  DROPPED
  SUSPENDED
}

// ==========================================
// PAYMENTS
// ==========================================

model Payment {
  id             String        @id @default(cuid())
  userId         String
  
  // Payment Details
  amount         Int           // Amount in pence
  currency       String        @default("gbp")
  status         PaymentStatus
  type           PaymentType
  
  // Stripe Integration
  stripePaymentIntentId String? @unique
  stripeChargeId        String? @unique
  
  // Linked Records
  bookingId      String?
  enrollmentId   String?
  
  // Metadata
  description    String
  metadata       Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user       AppUser     @relation(fields: [userId], references: [id], onDelete: Restrict)
  booking    Booking?    @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)
  
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  BOOKING_DEPOSIT
  BOOKING_BALANCE
  COURSE_PAYMENT
  REFUND
}

// ==========================================
// SYSTEM SETTINGS
// ==========================================

// ==========================================
// CLIENT PROFILES & MEDICAL RECORDS
// ==========================================

model ClientProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  dateOfBirth      DateTime?
  gender           String?
  address          Json?    // {line1, line2, city, postcode, country}
  emergencyContact Json?    // {name, phone, relationship}
  
  // Medical Information
  allergies        String[] // Known allergies
  medications      String[] // Current medications
  medicalConditions String[] // Existing conditions
  skinType         String?  // Fitzpatrick scale
  pregnancyStatus  String?  // Not pregnant, pregnant, breastfeeding
  
  // Preferences
  preferredPractitioner String?
  marketingConsent Boolean  @default(false)
  photoConsent     Boolean  @default(false)
  
  // Tracking
  totalSpent       Int      @default(0) // In pence
  visitCount       Int      @default(0)
  lastVisitDate    DateTime?
  riskLevel        String   @default("LOW") // LOW, MEDIUM, HIGH
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  user             AppUser      @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalHistory   MedicalHistory[]
  treatmentPhotos  TreatmentPhoto[]
  riskAssessments  RiskAssessment[]
  
  @@map("client_profiles")
}

model MedicalHistory {
  id               String        @id @default(cuid())
  clientProfileId  String
  version          Int           @default(1)
  
  // Medical Data
  conditions       String[]      // Medical conditions
  allergies        String[]      // Known allergies  
  medications      String[]      // Current medications
  surgeries        String[]      // Previous surgeries
  skinConcerns     String[]      // Skin issues
  currentSkincare  String[]      // Current routine
  
  // Assessment
  reviewedBy       String?       // Practitioner ID
  reviewedAt       DateTime?
  approved         Boolean       @default(false)
  notes            String?
  
  createdAt        DateTime      @default(now())
  
  // Relations
  clientProfile    ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  
  @@index([clientProfileId, version])
  @@map("medical_history")
}

model RiskAssessment {
  id               String        @id @default(cuid())
  clientProfileId  String
  treatmentId      String
  
  // Assessment Data
  riskLevel        String        // LOW, MEDIUM, HIGH
  contraindications String[]     // Identified risks
  recommendations  String[]      // Safety recommendations
  requiresConsult  Boolean       @default(false)
  
  // Approval
  assessedBy       String        // Practitioner ID
  approvedBy       String?       // Senior practitioner if required
  notes            String?
  
  createdAt        DateTime      @default(now())
  
  // Relations
  clientProfile    ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  treatment        Treatment     @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  
  @@map("risk_assessments")
}

model TreatmentPhoto {
  id               String        @id @default(cuid())
  clientProfileId  String
  bookingId        String?
  
  // Photo Data
  type             String        // BEFORE, AFTER, PROGRESS
  url              String        // S3/Blob storage URL
  thumbnailUrl     String?
  description      String?
  takenAt          DateTime      @default(now())
  
  // Metadata
  uploadedBy       String        // Practitioner ID
  consentGiven     Boolean       @default(false)
  
  createdAt        DateTime      @default(now())
  
  // Relations
  clientProfile    ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  booking          Booking?      @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  @@map("treatment_photos")
}

// ==========================================
// DOCUMENT MANAGEMENT & TEMPLATES
// ==========================================

model DocumentTemplate {
  id               String   @id @default(cuid())
  name             String
  type             String   // CONSENT, AFTERCARE, POLICY, MEDICAL_HISTORY
  category         String?  // Treatment category if specific
  
  // Template Data
  title            String
  content          String   @db.Text // HTML template with placeholders
  fields           Json     // Dynamic fields and their types
  mandatoryFields  String[] // Required fields
  
  // Settings
  requiresSignature Boolean  @default(true)
  expiresAfter     Int?     // Days until expiry
  version          String   @default("1.0")
  isActive         Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  documents        Document[]
  
  @@map("document_templates")
}

model Document {
  id                String            @id @default(cuid())
  templateId        String
  clientId          String?
  bookingId         String?
  
  // Document Data
  title             String
  content           String            @db.Text // Rendered content
  data              Json              // Form data used to generate
  version           String
  
  // Status
  status            DocumentStatus    @default(DRAFT)
  requiresSignature Boolean           @default(true)
  signedAt          DateTime?
  signedBy          String?           // Client ID
  ipAddress         String?
  userAgent         String?
  
  // Files
  pdfUrl            String?
  signedPdfUrl      String?
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  template          DocumentTemplate  @relation(fields: [templateId], references: [id])
  client            AppUser?        @relation("ClientDocuments", fields: [clientId], references: [id])
  booking           Booking?          @relation(fields: [bookingId], references: [id])
  
  @@map("documents")
}

enum DocumentStatus {
  DRAFT
  SENT
  SIGNED
  EXPIRED
  CANCELLED
}

// ==========================================
// ENHANCED LMS SYSTEM
// ==========================================

model Module {
  id               String   @id @default(cuid())
  courseId         String
  
  // Module Details
  title            String
  description      String?
  order            Int      // Order within course
  duration         Int      // Estimated minutes
  
  // Content
  content          Json     // Rich content structure
  videoUrl         String?
  materials        String[] // Download URLs
  
  // Settings
  isRequired       Boolean  @default(true)
  isActive         Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  course           Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons          Lesson[]
  assessments      Assessment[]
  
  @@map("modules")
}

model Lesson {
  id               String   @id @default(cuid())
  moduleId         String
  
  // Lesson Details
  title            String
  content          Json     // Rich content
  order            Int      // Order within module
  duration         Int      // Estimated minutes
  
  // Media
  videoUrl         String?
  attachments      String[] // File URLs
  
  // Settings
  isActive         Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  module           Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress         LessonProgress[]
  
  @@map("lessons")
}

model Assessment {
  id               String   @id @default(cuid())
  moduleId         String
  
  // Assessment Details
  title            String
  description      String?
  type             String   // QUIZ, ASSIGNMENT, PRACTICAL
  
  // Questions/Content
  questions        Json     // Question structure
  passingScore     Int      @default(70)
  maxAttempts      Int      @default(3)
  timeLimit        Int?     // Minutes
  
  // Settings
  isRequired       Boolean  @default(true)
  isActive         Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  module           Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  attempts         AssessmentAttempt[]
  
  @@map("assessments")
}

model AssessmentAttempt {
  id               String     @id @default(cuid())
  assessmentId     String
  studentId        String
  
  // Attempt Data
  attemptNumber    Int
  answers          Json       // Student responses
  score            Int?
  passed           Boolean    @default(false)
  
  // Timing
  startedAt        DateTime   @default(now())
  completedAt      DateTime?
  timeSpent        Int?       // Seconds
  
  // Grading
  gradedAt         DateTime?
  gradedBy         String?    // Educator ID
  feedback         String?
  
  // Relations
  assessment       Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  student          AppUser    @relation("StudentAssessments", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("assessment_attempts")
}

model LessonProgress {
  id               String   @id @default(cuid())
  lessonId         String
  studentId        String
  
  // Progress Data
  completed        Boolean  @default(false)
  progress         Int      @default(0) // Percentage
  timeSpent        Int      @default(0) // Seconds
  
  // Tracking
  startedAt        DateTime @default(now())
  completedAt      DateTime?
  lastAccessedAt   DateTime @default(now())
  
  // Relations
  lesson           Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student          AppUser  @relation("StudentProgress", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([lessonId, studentId])
  @@map("lesson_progress")
}

// ==========================================
// SCHEDULING & AVAILABILITY
// ==========================================

model Schedule {
  id               String   @id @default(cuid())
  practitionerId   String
  
  // Schedule Details
  dayOfWeek        Int      // 0-6 (Sunday-Saturday)
  startTime        String   // HH:mm format
  endTime          String   // HH:mm format
  isAvailable      Boolean  @default(true)
  
  // Break Times
  breaks           Json?    // Array of break periods
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  practitioner     PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  
  @@unique([practitionerId, dayOfWeek])
  @@map("schedules")
}

model ScheduleException {
  id               String   @id @default(cuid())
  practitionerId   String
  
  // Exception Details
  date             DateTime // Specific date
  startTime        String?  // Override start time
  endTime          String?  // Override end time
  isAvailable      Boolean  @default(false)
  reason           String?  // Holiday, sick, etc.
  
  createdAt        DateTime @default(now())
  
  // Relations
  practitioner     PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  
  @@map("schedule_exceptions")
}

// ==========================================
// NOTIFICATIONS & MESSAGING
// ==========================================

model NotificationTemplate {
  id               String   @id @default(cuid())
  name             String
  type             String   // EMAIL, SMS
  trigger          String   // BOOKING_CONFIRMED, REMINDER_24H, etc.
  
  // Template Content
  subject          String?
  content          String   @db.Text
  variables        String[] // Available placeholders
  
  // Settings
  isActive         Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  notifications    Notification[]
  
  @@map("notification_templates")
}

model Notification {
  id               String                @id @default(cuid())
  templateId       String?
  recipientId      String
  
  // Notification Details
  type             String                // EMAIL, SMS, PUSH
  subject          String?
  content          String                @db.Text
  
  // Delivery
  status           NotificationStatus    @default(PENDING)
  sentAt           DateTime?
  deliveredAt      DateTime?
  readAt           DateTime?
  
  // Metadata
  metadata         Json?
  error            String?
  
  createdAt        DateTime              @default(now())
  
  // Relations
  template         NotificationTemplate? @relation(fields: [templateId], references: [id])
  recipient        AppUser             @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

// ==========================================
// AUDIT & COMPLIANCE
// ==========================================

model AuditLog {
  id               String   @id @default(cuid())
  userId           String?
  
  // Action Details
  action           String   // CREATE, UPDATE, DELETE, VIEW, etc.
  resource         String   // TABLE_NAME or resource identifier
  resourceId       String?  // ID of affected resource
  
  // Changes
  oldValues        Json?    // Previous state
  newValues        Json?    // New state
  
  // Context
  ipAddress        String?
  userAgent        String?
  metadata         Json?
  
  createdAt        DateTime @default(now())
  
  // Relations
  user             AppUser?   @relation("UserAudits", fields: [userId], references: [id])
  
  @@index([createdAt])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

model SystemSetting {
  id          String @id @default(cuid())
  key         String @unique
  value       Json
  description String?
  updatedAt   DateTime @updatedAt
  
  @@map("system_settings")
}
