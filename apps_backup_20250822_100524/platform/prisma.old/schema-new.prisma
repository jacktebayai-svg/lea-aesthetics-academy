// Master Aesthetics Suite - Single Tenant Database Schema
// Aligned with the Master Aesthetics Suite specification

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// BUSINESS SETTINGS (Single Row Table)
// ==========================================

model BusinessSettings {
  id            String   @id @default("business_settings")
  businessName  String
  ownerName     String
  email         String
  phone         String?
  address       Json     @default("{}")  // {line1, line2, city, postcode, country}
  timezone      String   @default("Europe/London")
  branding      Json     @default("{}")  // {logo, colors, theme}
  policies      Json     @default("{}")  // {terms, privacy, cancellation}
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("business_settings")
}

// ==========================================
// USER PROFILES (Extends Supabase Auth)
// ==========================================

model UserProfile {
  id        String   @id // References auth.users UUID
  email     String   @unique
  role      UserRole
  profile   Json     @default("{}")  // Flexible profile data
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client       Client?
  student      Student?
  appointments Appointment[]
  enrollments  CourseEnrollment[]
  payments     Payment[]
  documents    Document[]
  messages     Message[]
  auditLogs    AuditLog[]
  fileUploads  FileUpload[]

  @@map("user_profiles")
}

enum UserRole {
  owner
  client
  student
}

// ==========================================
// SERVICES
// ==========================================

model Service {
  id              String  @id @default(uuid())
  name            String
  slug            String  @unique
  description     String?
  basePrice       Int     // in pence
  durationMinutes Int
  category        ServiceCategory
  bufferMinutes   Json    @default("{}")  // {before: 15, after: 15}
  isActive        Boolean @default(true)
  settings        Json    @default("{}")  // Additional service settings
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@map("services")
}

enum ServiceCategory {
  treatment
  consultation
  course
  workshop
}

// ==========================================
// CLIENTS
// ==========================================

model Client {
  id           String  @id @default(uuid())
  userId       String  @unique
  personalInfo Json    @default("{}")  // {firstName, lastName, dateOfBirth, phone, address}
  preferences  Json    @default("{}")  // {preferredPractitioner, notifications}
  tags         String[]
  totalSpent   Int     @default(0) // in pence
  lastVisit    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user             UserProfile      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments     Appointment[]
  medicalHistories MedicalHistory[]
  documents        Document[]

  @@map("clients")
}

// ==========================================
// STUDENTS
// ==========================================

model Student {
  id             String @id @default(uuid())
  userId         String @unique
  personalInfo   Json   @default("{}")  // {firstName, lastName, dateOfBirth, phone, address}
  certifications Json[] @default([])   // Array of certification objects
  progress       Json   @default("{}")  // Overall progress tracking
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user        UserProfile       @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments CourseEnrollment[]
  appointments Appointment[]
  documents   Document[]

  @@map("students")
}

// ==========================================
// MEDICAL HISTORIES
// ==========================================

model MedicalHistory {
  id        String   @id @default(uuid())
  clientId  String
  data      Json     @default("{}")  // {conditions, allergies, medications, etc.}
  riskFlags String[]
  version   Int
  createdAt DateTime @default(now())

  // Relations
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, version])
  @@map("medical_histories")
}

// ==========================================
// APPOINTMENTS
// ==========================================

model Appointment {
  id           String            @id @default(uuid())
  clientId     String?
  studentId    String?
  serviceId    String
  startTime    DateTime
  endTime      DateTime
  status       AppointmentStatus @default(pending_deposit)
  notes        String?
  remindersSent Int             @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  client   Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  student  Student?    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  service  Service     @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  user     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String      // For audit trail
  payments Payment[]
  documents Document[]

  // Constraint: Either client or student, not both
  @@check(raw("(client_id IS NOT NULL AND student_id IS NULL) OR (client_id IS NULL AND student_id IS NOT NULL)"))
  @@map("appointments")
}

enum AppointmentStatus {
  pending_deposit
  confirmed
  in_progress
  completed
  cancelled
  no_show
}

// ==========================================
// COURSES
// ==========================================

model Course {
  id                  String  @id @default(uuid())
  title               String
  slug                String  @unique
  description         String?
  price               Int     // in pence
  durationHours       Int
  maxStudents         Int?
  curriculum          Json    @default("{}")  // Course structure
  prerequisites       Json    @default("{}")  // Required prior knowledge/courses
  certificateTemplate Json    @default("{}")  // Certificate design/content
  isActive            Boolean @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  enrollments CourseEnrollment[]

  @@map("courses")
}

// ==========================================
// COURSE ENROLLMENTS
// ==========================================

model CourseEnrollment {
  id               String           @id @default(uuid())
  studentId        String
  courseId         String
  status           EnrollmentStatus @default(enrolled)
  progress         Json             @default("{}")  // Progress tracking data
  completedAt      DateTime?
  certificateIssued Boolean         @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  student  Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String      // For tracking
  payments Payment[]

  @@unique([studentId, courseId])
  @@map("course_enrollments")
}

enum EnrollmentStatus {
  enrolled
  in_progress
  completed
  cancelled
}

// ==========================================
// PAYMENTS
// ==========================================

model Payment {
  id                   String        @id @default(uuid())
  appointmentId        String?
  courseEnrollmentId   String?
  stripePaymentIntentId String?
  amount               Int           // in pence
  depositAmount        Int           @default(0)
  currency             String        @default("GBP")
  status               PaymentStatus @default(pending)
  paidAt               DateTime?
  refundedAt           DateTime?
  metadata             Json          @default("{}")
  createdAt            DateTime      @default(now())

  // Relations
  appointment      Appointment?      @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  courseEnrollment CourseEnrollment? @relation(fields: [courseEnrollmentId], references: [id], onDelete: Cascade)
  user            UserProfile       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  // Constraint: Either appointment or course enrollment, not both
  @@check(raw("(appointment_id IS NOT NULL AND course_enrollment_id IS NULL) OR (appointment_id IS NULL AND course_enrollment_id IS NOT NULL)"))
  @@map("payments")
}

enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
  partial_refund
}

// ==========================================
// TEMPLATES
// ==========================================

model Template {
  id             String       @id @default(uuid())
  type           TemplateType
  name           String
  content        Json         @default("{}")  // Template content structure
  version        String
  isActive       Boolean      @default(true)
  mandatoryBlocks String[]     // Required sections
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  documents Document[]

  @@map("templates")
}

enum TemplateType {
  consent
  aftercare
  policy
  certificate
  email
}

// ==========================================
// DOCUMENTS
// ==========================================

model Document {
  id           String         @id @default(uuid())
  type         DocumentType
  clientId     String?
  studentId    String?
  templateId   String
  appointmentId String?
  content      Json           @default("{}")  // Document content
  pdfUrl       String?
  status       DocumentStatus @default(draft)
  signedAt     DateTime?
  expiresAt    DateTime?
  hash         String?        // Document integrity hash
  createdAt    DateTime       @default(now())

  // Relations
  client      Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  student     Student?     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  template    Template     @relation(fields: [templateId], references: [id], onDelete: Restrict)
  user        UserProfile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  // Constraint: Either client or student, not both
  @@check(raw("(client_id IS NOT NULL AND student_id IS NULL) OR (client_id IS NULL AND student_id IS NOT NULL)"))
  @@map("documents")
}

enum DocumentType {
  consent
  aftercare_guide
  policy_agreement
  certificate
}

enum DocumentStatus {
  draft
  sent
  signed
  expired
}

// ==========================================
// CAMPAIGNS
// ==========================================

model Campaign {
  id             String         @id @default(uuid())
  name           String
  type           CampaignType
  audienceFilter Json           @default("{}")  // Filter criteria
  content        Json           @default("{}")  // Campaign content
  scheduledFor   DateTime?
  sentAt         DateTime?
  status         CampaignStatus @default(draft)
  stats          Json           @default("{}")  // Campaign statistics
  createdAt      DateTime       @default(now())

  // Relations
  messages Message[]

  @@map("campaigns")
}

enum CampaignType {
  email
  sms
  automated_sequence
}

enum CampaignStatus {
  draft
  scheduled
  sent
  cancelled
}

// ==========================================
// MESSAGES
// ==========================================

model Message {
  id            String        @id @default(uuid())
  campaignId    String?
  recipientId   String
  recipientType RecipientType
  channel       MessageChannel
  content       Json          @default("{}")  // Message content
  status        MessageStatus @default(pending)
  sentAt        DateTime?
  deliveredAt   DateTime?
  openedAt      DateTime?
  errorMessage  String?
  createdAt     DateTime      @default(now())

  // Relations
  campaign  Campaign?   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  recipient UserProfile @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum RecipientType {
  client
  student
}

enum MessageChannel {
  email
  sms
}

enum MessageStatus {
  pending
  sent
  delivered
  opened
  failed
}

// ==========================================
// AUDIT LOGS
// ==========================================

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String   // CREATE, UPDATE, DELETE, VIEW, etc.
  resource   String   // Table name or resource identifier
  resourceId String?  // ID of affected resource
  oldValues  Json?    // Previous state
  newValues  Json?    // New state
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user UserProfile? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

// ==========================================
// FILE UPLOADS
// ==========================================

model FileUpload {
  id           String      @id @default(uuid())
  filename     String
  originalName String
  mimetype     String
  size         Int
  storagePath  String      // Supabase Storage path
  uploadedBy   String?
  createdAt    DateTime    @default(now())

  // Relations
  uploader UserProfile? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)

  @@map("file_uploads")
}
