// packages/db/schema.prisma
// Luxury Aesthetics Practice Platform - Single Tenant Architecture
// Three-portal system: Client, Student, Admin roles

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE USER MANAGEMENT - SINGLE TENANT
// ==========================================

model User {
  id               String     @id @default(cuid())
  email            String     @unique
  password         String?    // Hashed password
  firstName        String?
  lastName         String?
  phone            String?
  avatar           String?    // S3 URL
  role             Role       @default(CLIENT)
  isActive         Boolean    @default(true)
  emailVerified    Boolean    @default(false)
  phoneVerified    Boolean    @default(false)
  twoFactorEnabled Boolean    @default(false)
  twoFactorSecret  String?    // TOTP secret
  lastLoginAt      DateTime?
  lastLoginIp      String?
  preferences      Json       @default("{}")
  metadata         Json?
  deletedAt        DateTime?  // Soft delete for GDPR
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relations
  refreshTokens    RefreshToken[]
  client           Client?
  student          Student?
  practitioner     Practitioner?
  
  // Document relations
  createdDocuments Document[] @relation("DocumentCreator")
  signedDocuments  DocumentSignature[]
  uploadedFiles    File[] @relation("FileUploader")
  
  // Communication
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  
  // Learning Management System Relations
  enrollments      Enrollment[]
  assessmentAttempts AssessmentAttempt[]
  certificates     Certificate[]
  
  // Activity tracking
  auditLogs        AuditLog[]
  
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

enum Role {
  ADMIN       // Full platform access - business owner/manager
  CLIENT      // Booking appointments, viewing history, payments
  STUDENT     // Accessing courses, taking assessments, certificates
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  family    String?  // Token family for rotation
  expiresAt DateTime
  lastUsedAt DateTime?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([family])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// ==========================================
// BUSINESS PROFILE - SINGLE TENANT
// ==========================================

model BusinessProfile {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  type           String   @default("clinic") // clinic, studio, mobile
  timezone       String   @default("Europe/London")
  address        Json     // {line1, line2, city, state, postcode, country}
  coordinates    Json?    // {lat, lng} for map display
  phone          String?
  email          String?
  website        String?
  businessHours  Json     // Weekly schedule
  holidays       Json?    // Exception dates
  settings       Json     @default("{}")
  amenities      String[] // parking, wheelchair-access, etc.
  images         Json?    // Gallery URLs
  logoUrl        String?
  faviconUrl     String?
  theme          Json     @default("{}")
  seo            Json?    // SEO metadata
  socialLinks    Json?    // Social media URLs
  customCss      String?  @db.Text
  customJs       String?  @db.Text
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  appointments   Appointment[]
  availabilityRules AvailabilityRule[]
  resourceConstraints ResourceConstraint[]
  
  @@index([slug])
  @@map("business_profile")
}

// ==========================================
// CLIENT & STUDENT PROFILES - SINGLE TENANT
// ==========================================

model Client {
  id               String   @id @default(cuid())
  userId           String   @unique // Link to user account
  firstName        String
  lastName         String
  email            String   @unique
  phone            String?
  dateOfBirth      DateTime?
  gender           String?
  address          Json?    // {line1, line2, city, postcode, country}
  emergencyContact Json?    // {name, phone, relationship}
  preferences      Json     @default("{}")
  tags             String[] // Client tags for segmentation
  source           String?  // Acquisition source
  referredBy       String?  // Referral client ID
  notes            String?  @db.Text
  marketingConsent Boolean  @default(false)
  smsConsent       Boolean  @default(false)
  emailConsent     Boolean  @default(false)
  isVip            Boolean  @default(false)
  isBlacklisted    Boolean  @default(false)
  blacklistReason  String?
  firstVisitDate   DateTime?
  lastVisitDate    DateTime?
  totalSpent       Int      @default(0) // In cents
  visitCount       Int      @default(0)
  metadata         Json?
  deletedAt        DateTime? // Soft delete for GDPR
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String?  // User ID who created the record
  
  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalHistories MedicalHistory[]
  appointments     Appointment[]
  documents        Document[]
  esignSessions    EsignSession[]
  
  @@index([email])
  @@index([phone])
  @@index([isBlacklisted])
  @@map("clients")
}

model Student {
  id               String   @id @default(cuid())
  userId           String   @unique // Link to user account
  studentNumber    String   @unique // Auto-generated student ID
  firstName        String
  lastName         String
  email            String   @unique
  phone            String?
  dateOfBirth      DateTime?
  address          Json?    // {line1, line2, city, postcode, country}
  emergencyContact Json?    // {name, phone, relationship}
  qualifications   Json?    // Prior qualifications
  experience       Json?    // Previous experience
  goals            String?  @db.Text // Learning goals
  specialties      String[] // Areas of interest
  preferences      Json     @default("{}")
  notes            String?  @db.Text
  marketingConsent Boolean  @default(false)
  smsConsent       Boolean  @default(false)
  emailConsent     Boolean  @default(false)
  enrollmentDate   DateTime @default(now())
  metadata         Json?
  deletedAt        DateTime? // Soft delete for GDPR
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String?  // User ID who created the record
  
  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments      Enrollment[] @relation("StudentEnrollments")
  certificates     Certificate[] @relation("StudentCertificates")
  
  @@index([email])
  @@index([studentNumber])
  @@map("students")
}

model MedicalHistory {
  id              String   @id @default(cuid())
  clientId        String
  version         Int
  allergies       Json?    // Known allergies
  medications     Json?    // Current medications
  conditions      Json?    // Medical conditions
  previousTreatments Json? // Previous aesthetic treatments
  skinType        String?  // Fitzpatrick scale
  pregnancyStatus String?  // Not pregnant, pregnant, breastfeeding
  smokingStatus   String?  // Never, former, current
  alcoholUse      String?  // None, social, regular
  supplements     Json?    // Vitamins and supplements
  familyHistory   Json?    // Relevant family medical history
  notes           String?  @db.Text
  riskFlags       Json?    // AI-generated risk flags
  reviewedBy      String?  // Practitioner who reviewed
  reviewedAt      DateTime?
  isActive        Boolean  @default(true) // Latest version flag
  createdAt       DateTime @default(now())
  createdBy       String?  // User ID who created the record
  
  // Relations
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@index([clientId, isActive])
  @@index([clientId, version])
  @@map("medical_histories")
}

// ==========================================
// SERVICES & PRACTITIONERS
// ==========================================

model Service {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String?  @db.Text
  shortDescription String?
  basePrice        Int      // Price in cents
  durationMin      Int      // Service duration in minutes
  category         String   // injectables, laser, facial, etc.
  subcategory      String?
  buffers          Json?    // {before: 15, after: 10} in minutes
  requirements     Json?    // {consultation: true, patchTest: true}
  contraindications Json?   // Medical contraindications
  aftercare        Json?    // Aftercare instructions
  images           Json?    // Service images
  tags             String[] // searchable tags
  metadata         Json?
  displayOrder     Int      @default(0)
  isBookable       Boolean  @default(true)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  appointments     Appointment[]
  practitionerServices PractitionerService[]
  
  @@index([category])
  @@index([isActive, isBookable])
  @@map("services")
}

model Practitioner {
  id                String   @id @default(cuid())
  userId            String   @unique
  title             String?  // Dr., RN, etc.
  bio               String?  @db.Text
  specialties       String[] // Array of specialty areas
  qualifications    Json?    // {degrees: [], certifications: []}
  registrationNum   String?  // Professional registration number
  availability      Json     @default("{}") // Default weekly availability rules
  bookingBuffer     Int      @default(15) // Minutes between appointments
  maxDailyBookings  Int?     // Optional daily booking limit
  profile           Json     @default("{}")
  images            Json?    // Profile and gallery images
  isAcceptingNew    Boolean  @default(true)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  services          PractitionerService[]
  availabilityRules AvailabilityRule[]
  
  @@index([isActive])
  @@map("practitioners")
}

model PractitionerService {
  id             String   @id @default(cuid())
  practitionerId String
  serviceId      String
  customPrice    Int?     // Override base price for this practitioner
  customDuration Int?     // Override duration for this practitioner
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  
  // Relations
  practitioner   Practitioner @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  service        Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([practitionerId, serviceId])
  @@map("practitioner_services")
}

enum AppointmentStatus {
  PENDING_DEPOSIT
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// ==========================================
// APPOINTMENTS & SCHEDULING
// ==========================================

model Appointment {
  id                String            @id @default(cuid())
  clientId          String
  practitionerId    String
  serviceId         String
  businessProfileId String
  startTs           DateTime
  endTs             DateTime
  status            AppointmentStatus
  confirmationCode  String?           @unique
  roomId            String?           // Resource constraint
  equipmentIds      String[]          // Equipment requirements
  notes             String?           @db.Text
  internalNotes     String?           @db.Text // Staff-only notes
  remindersSent     Json?             // {"24h": true, "1h": false}
  checkedInAt       DateTime?
  completedAt       DateTime?
  cancelledAt       DateTime?
  cancelledBy       String?           // User ID
  cancellationReason String?
  noShowReason      String?
  policyVersion     Int               @default(1)
  source            String?           // online, phone, walk-in
  metadata          Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String?           // User ID who created
  
  // Relations
  client            Client            @relation(fields: [clientId], references: [id], onDelete: Restrict)
  practitioner      Practitioner      @relation(fields: [practitionerId], references: [id], onDelete: Restrict)
  service           Service           @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  businessProfile   BusinessProfile   @relation(fields: [businessProfileId], references: [id], onDelete: Restrict)
  payments          Payment[]
  documents         Document[]
  holds             AppointmentHold[]
  
  @@index([status])
  @@index([startTs])
  @@index([clientId])
  @@index([practitionerId])
  @@index([confirmationCode])
  @@map("appointments")
}

model AppointmentHold {
  id            String   @id @default(cuid())
  appointmentId String?
  userId        String?  // User holding the slot
  sessionId     String   // Browser session
  startTs       DateTime
  endTs         DateTime
  serviceId     String
  practitionerId String
  businessProfileId String
  expiresAt     DateTime // Hold expiration
  convertedAt   DateTime? // When converted to appointment
  releasedAt    DateTime? // When manually released
  createdAt     DateTime @default(now())
  
  // Relations
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  
  @@index([expiresAt])
  @@index([sessionId])
  @@map("appointment_holds")
}

enum PaymentStatus {
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

// ==========================================
// PAYMENTS & FINANCIAL
// ==========================================

model Payment {
  id                String        @id @default(cuid())
  appointmentId     String?
  clientId          String?
  enrollmentId      String?       // Link to course enrollment
  type              String        // deposit, full, refund, adjustment, course_payment
  stripePiId        String?       @unique // Payment Intent ID
  stripeChargeId    String?       @unique
  stripeRefundId    String?       @unique
  amountCents       Int
  currency          String        @default("gbp")
  status            PaymentStatus
  depositCents      Int           @default(0)
  refundedCents     Int           @default(0)
  processingFee     Int           @default(0) // Stripe fees in cents
  netAmount         Int           @default(0) // After fees
  paymentMethod     String?       // card, cash, transfer
  last4             String?       // Last 4 digits of card
  cardBrand         String?       // visa, mastercard, etc.
  receiptUrl        String?       // Stripe receipt URL
  failureReason     String?
  failureCode       String?
  refundReason      String?
  metadata          Json?
  idempotencyKey    String?       @unique
  processedAt       DateTime?
  settledAt         DateTime?    // When funds were settled
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdBy         String?       // User ID who created
  
  // Relations
  appointment       Appointment?  @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  enrollment        Enrollment?   @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)
  
  @@index([status])
  @@index([appointmentId])
  @@index([stripePiId])
  @@map("payments")
}

// ==========================================
// DOCUMENTS & TEMPLATES
// ==========================================

model Template {
  id               String   @id @default(cuid())
  name             String
  type             String   // consent, aftercare, policy, intake
  jurisdiction     String   // UK, EU, US
  version          String
  content          Json     // blocks with placeholders
  mandatoryBlocks  String[] // IDs of required blocks
  placeholders     String[] // Available placeholders
  validationRules  Json?    // Validation rules for fields
  effectiveFrom    DateTime
  effectiveTo      DateTime?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String?  // User ID who created
  
  // Relations
  documents        Document[]
  
  @@index([type])
  @@index([type, jurisdiction, effectiveFrom])
  @@map("templates")
}

model Document {
  id               String    @id @default(cuid())
  templateId       String?
  appointmentId    String?
  clientId         String?
  type             String    // consent, aftercare, policy, invoice
  title            String
  content          Json      // Rendered document content
  version          String
  locked           Boolean   @default(false)
  signedAt         DateTime?
  signedBy         String?   // User ID who signed
  signatureData    Json?     // Signature metadata (IP, UA, etc.)
  expiresAt        DateTime?
  stampHash        String?   // Cryptographic stamp
  s3Key            String?   // S3 location for PDF
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String?   // User ID who created
  
  // Relations
  template         Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  appointment      Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  client           Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  creator          User?     @relation("DocumentCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  esignSessions    EsignSession[]
  signatures       DocumentSignature[]
  
  @@index([type])
  @@index([clientId])
  @@index([appointmentId])
  @@map("documents")
}

model DocumentSignature {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  signedAt   DateTime @default(now())
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, userId])
  @@map("document_signatures")
}

model EsignSession {
  id               String   @id @default(cuid())
  documentId       String
  clientId         String
  provider         String   @default("internal") // internal, docusign, hellosign
  envelopeId       String?  @unique // External provider envelope ID
  status           String   // created, sent, viewed, signed, declined, void
  envelope         Json     // Envelope data
  sentAt           DateTime?
  viewedAt         DateTime?
  signedAt         DateTime?
  declinedAt       DateTime?
  declineReason    String?
  voidedAt         DateTime?
  voidReason       String?
  reminderCount    Int      @default(0)
  lastReminderAt   DateTime?
  ipAddress        String?  // Signer's IP
  userAgent        String?  // Signer's browser
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  document         Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  client           Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@index([clientId])
  @@index([status])
  @@map("esign_sessions")
}

// ==========================================
// MARKETING & COMMUNICATIONS
// ==========================================

model Campaign {
  id              String    @id @default(cuid())
  name            String
  type            String    // email, sms, multi-channel
  audience        Json      // Segment criteria
  content         Json      // Campaign content by channel
  scheduleTs      DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  status          String    // draft, scheduled, running, paused, completed, cancelled
  stats           Json?     // {sent: 0, delivered: 0, opened: 0, clicked: 0}
  abTestVariants  Json?     // A/B test configuration
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String?   // User ID who created
  
  // Relations
  messages        Message[]
  
  @@index([status])
  @@map("campaigns")
}

model Message {
  id              String   @id @default(cuid())
  campaignId      String?
  senderId        String?  // User who sent the message
  receiverId      String?  // User who received the message
  channel         String   // email, sms, whatsapp, push
  toRef           String   // email address, phone number, etc.
  clientId        String?  // Link to client
  templateId      String?  // Notification template used
  subject         String?
  payload         Json     // Message content and variables
  status          String   // queued, sending, sent, delivered, failed, bounced
  provider        String?  // sendgrid, twilio, etc.
  providerMsgId   String?  // External provider message ID
  sentAt          DateTime?
  deliveredAt     DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  bouncedAt       DateTime?
  error           String?  @db.Text
  errorCode       String?
  retryCount      Int      @default(0)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  campaign        Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  sender          User?     @relation("MessageSender", fields: [senderId], references: [id], onDelete: SetNull)
  receiver        User?     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: SetNull)
  
  @@index([status])
  @@index([channel])
  @@index([campaignId])
  @@map("messages")
}

model NotificationTemplate {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  channel         String   // email, sms, whatsapp
  trigger         String?  // Event type that triggers this
  subject         String?  // Email subject template
  content         String   @db.Text // Template content
  variables       String[] // Required variables
  metadata        Json?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([channel])
  @@map("notification_templates")
}

model Automation {
  id              String   @id @default(cuid())
  name            String
  description     String?
  trigger         Json     // Event trigger configuration
  conditions      Json?    // Conditions to evaluate
  actions         Json     // Actions to perform
  schedule        Json?    // Cron schedule if time-based
  isActive        Boolean  @default(true)
  lastRunAt       DateTime?
  runCount        Int      @default(0)
  errorCount      Int      @default(0)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?  // User ID who created
  
  @@index([isActive])
  @@map("automations")
}

// ==========================================
// FILE STORAGE
// ==========================================

model File {
  id            String   @id @default(cuid())
  filename      String
  originalName  String
  mimetype      String
  size          Int      // Size in bytes
  s3Key         String   @unique
  s3Bucket      String
  s3Region      String   @default("eu-west-2")
  cdnUrl        String?  // CloudFront URL
  uploadedBy    String?  // User ID
  entityType    String?  // appointment, client, etc.
  entityId      String?  // Related entity ID
  category      String?  // document, image, video
  isPublic      Boolean  @default(false)
  metadata      Json?    // Image dimensions, duration, etc.
  createdAt     DateTime @default(now())
  
  // Relations
  uploader      User?    @relation("FileUploader", fields: [uploadedBy], references: [id], onDelete: SetNull)
  
  @@index([entityType, entityId])
  @@map("files")
}

// ==========================================
// BOOKING ENGINE
// ==========================================

model AvailabilityRule {
  id              String   @id @default(cuid())
  practitionerId  String?
  businessProfileId String?
  type            String   // weekly, exception, block
  priority        Int      @default(0) // Higher priority overrides
  startDate       DateTime?
  endDate         DateTime?
  recurrence      Json?    // RRULE for recurring patterns
  timeSlots       Json     // Available time slots
  reason          String?  // For blocks/exceptions
  metadata        Json?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?  // User ID who created
  
  // Relations
  practitioner    Practitioner? @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  businessProfile BusinessProfile? @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)
  
  @@index([practitionerId])
  @@index([businessProfileId])
  @@index([type, isActive])
  @@map("availability_rules")
}

model ResourceConstraint {
  id              String   @id @default(cuid())
  businessProfileId String
  type            String   // room, equipment, staff
  resourceId      String   // ID of the resource
  name            String
  capacity        Int      @default(1) // How many can use simultaneously
  schedule        Json?    // Available hours
  requirements    Json?    // Services that require this resource
  maintenanceSchedule Json? // Maintenance windows
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  businessProfile BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)
  
  @@index([businessProfileId])
  @@index([type])
  @@map("resource_constraints")
}

// ==========================================
// LEARNING MANAGEMENT SYSTEM
// ==========================================

model Course {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  description     String?  @db.Text
  level           String   // Level 2, Level 3, Level 4
  category        String   // Anatomy, Safety, Treatments, Business
  subcategory     String?
  prerequisites   String[] // Course IDs that must be completed first
  duration        Int      // Estimated hours
  credits         Int?     // CPD credits
  price           Int?     // Price in cents if paid course
  content         Json     @default("{}")
  coverImage      String?  // S3 URL
  promotional     Json?    // Promotional content
  tags            String[] // Searchable tags
  accreditation   Json?    // Accreditation details
  passingScore    Int      @default(70) // Overall passing percentage
  certificateTemplate String? // Certificate template ID
  isPublished     Boolean  @default(false)
  isActive        Boolean  @default(true)
  displayOrder    Int      @default(0)
  metadata        Json?
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?  // User ID who created
  
  // Relations
  modules         Module[]
  enrollments     Enrollment[]
  certificates    Certificate[]
  
  @@index([slug])
  @@index([level, category])
  @@index([isPublished, isActive])
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  slug        String
  description String?
  content     Json     @default("{}")
  order       Int      @default(0)
  duration    Int      // estimated minutes
  isRequired  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  assessments Assessment[]
  
  @@map("modules")
}

model Lesson {
  id          String   @id @default(cuid())
  moduleId    String
  title       String
  slug        String
  content     Json     @default("{}")
  type        String   // text, video, interactive, quiz
  order       Int      @default(0)
  duration    Int      // estimated minutes
  isRequired  Boolean  @default(true)
  resources   Json?    // Additional resources, downloads
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  module      Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]
  
  @@map("lessons")
}

model Assessment {
  id              String   @id @default(cuid())
  moduleId        String
  courseId        String?
  title           String
  description     String?
  type            String   // quiz, exam, practical, assignment
  questions       Json     @default("{}")
  passingScore    Int      @default(70)
  timeLimit       Int?     // minutes
  maxAttempts     Int      @default(3)
  isRequired      Boolean  @default(true)
  order           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  module          Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  attempts        AssessmentAttempt[]
  
  @@map("assessments")
}

model Enrollment {
  id              String   @id @default(cuid())
  userId          String
  courseId        String
  status          String   // enrolled, in_progress, completed, dropped
  progress        Int      @default(0) // percentage
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  certificateUrl  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student         Student? @relation("StudentEnrollments", fields: [userId], references: [userId], onDelete: Cascade, map: "enrollment_student_fkey")
  lessonProgress  LessonProgress[]
  payments        Payment[]
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id           String   @id @default(cuid())
  enrollmentId String
  lessonId     String
  status       String   // not_started, in_progress, completed
  progress     Int      @default(0) // percentage
  timeSpent    Int      @default(0) // minutes
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson       Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([enrollmentId, lessonId])
  @@map("lesson_progress")
}

model AssessmentAttempt {
  id           String   @id @default(cuid())
  assessmentId String
  userId       String
  answers      Json     @default("{}")
  score        Int      // achieved score
  totalScore   Int      // maximum possible score
  passed       Boolean  @default(false)
  timeSpent    Int      // minutes
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  feedback     Json?    // Detailed feedback per question
  
  // Relations
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("assessment_attempts")
}

model Certificate {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  certificateNumber String @unique
  issuedAt     DateTime @default(now())
  expiresAt    DateTime?
  pdfUrl       String?
  metadata     Json?    // Additional certificate data
  
  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student      Student? @relation("StudentCertificates", fields: [userId], references: [userId], onDelete: Cascade, map: "certificate_student_fkey")
  
  @@map("certificates")
}

// ==========================================
// AUDIT & EVENTS
// ==========================================

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?  // User who performed the action
  action       String   // create, update, delete, view
  entityType   String   // Model name
  entityId     String   // Entity ID
  changes      Json?    // Before/after values for updates
  ipAddress    String?
  userAgent    String?
  sessionId    String?
  createdAt    DateTime @default(now())
  
  // Relations
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}
