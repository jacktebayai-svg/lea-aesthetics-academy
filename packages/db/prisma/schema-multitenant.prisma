// packages/db/schema.prisma
// Master Aesthetics Suite - Multitenant Schema
// Comprehensive schema supporting multitenant SaaS for aesthetics clinics
// with integrated LMS and compliance features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE TENANT & USER MANAGEMENT
// ==========================================

model Tenant {
  id                   String   @id @default(cuid())
  name                 String
  slug                 String   @unique
  plan                 String   // starter, professional, enterprise
  complianceChecklist  Json     @default("{}") // JCCP/Ofqual alignments
  settings             Json     @default("{}")
  isActive             Boolean  @default(true)
  trialEndsAt          DateTime?
  subscriptionId       String?  // Stripe subscription ID
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  users                User[]
  userRoles            UserRole[]
  brands               Brand[]
  locations            Location[]
  services             Service[]
  practitioners        Practitioner[]
  clients              Client[]
  students             Student[]
  appointments         Appointment[]
  courses              Course[]
  payments             Payment[]
  templates            Template[]
  documents            Document[]
  campaigns            Campaign[]
  events               Event[]

  @@index([slug])
  @@index([isActive])
  @@map("tenants")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  authProviderId  String    // OIDC provider ID
  firstName       String?
  lastName        String?
  avatar          String?
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  preferences     Json      @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId        String
  roles           UserRole[]
  clients         Client[]
  students        Student[]
  practitioners   Practitioner[]
  enrollments     CourseEnrollment[]
  assessmentAttempts AssessmentAttempt[]
  certificates    Certificate[]
  cpdLogs         CpdLog[]
  documents       Document[]
  events          Event[]

  @@index([email])
  @@index([tenantId])
  @@map("users")
}

enum Role {
  OWNER
  MANAGER
  PRACTITIONER
  TUTOR
  FRONTDESK
  FINANCE
  SUPPORT
  STUDENT
  CLIENT
}

model UserRole {
  id         String  @id @default(cuid())
  userId     String
  tenantId   String
  role       Role
  locationId String?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

  @@unique([userId, tenantId, role, locationId])
  @@index([tenantId])
  @@map("user_roles")
}

// ==========================================
// BRANDING & LOCATIONS
// ==========================================

model Brand {
  id        String  @id @default(cuid())
  tenantId  String
  domain    String?
  subdomain String?
  theme     Json    @default("{}")
  seo       Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("brands")
}

model Location {
  id           String   @id @default(cuid())
  tenantId     String
  name         String
  timezone     String   @default("Europe/London")
  address      Json
  phone        String?
  email        String?
  settings     Json     @default("{}")
  businessHours Json    @default("{}")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles    UserRole[]
  appointments Appointment[]

  @@index([tenantId])
  @@map("locations")
}

// ==========================================
// SERVICES & PRACTITIONERS
// ==========================================

model Service {
  id            String   @id @default(cuid())
  tenantId      String
  name          String
  slug          String
  description   String?
  basePrice     Int      // Price in cents
  durationMin   Int
  category      String   // treatment, course, workshop
  buffers       Json?    // prep/cleanup mins
  licensingTier String   // Green/Amber/Red
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  appointments  Appointment[]

  @@unique([tenantId, slug])
  @@index([tenantId, category])
  @@map("services")
}

model Practitioner {
  id            String   @id @default(cuid())
  tenantId      String
  userId        String
  specialties   String[]
  availability  Json     @default("{}") // rules: weekly, exceptions
  profile       Json     @default("{}")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]

  @@unique([tenantId, userId])
  @@index([tenantId])
  @@map("practitioners")
}

// ==========================================
// CLIENTS & STUDENTS
// ==========================================

model Client {
  id               String   @id @default(cuid())
  tenantId         String
  userId           String?  // Optional link to user account
  personal         Json     // firstName, lastName, email, phone, etc.
  preferences      Json?
  tags             String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  medicalHistories MedicalHistory[]
  appointments     Appointment[]
  documents        Document[]

  @@index([tenantId])
  @@map("clients")
}

model Student {
  id            String   @id @default(cuid())
  tenantId      String
  userId        String?  // Optional link to user account
  personal      Json     // firstName, lastName, email, phone, etc.
  certifications Json[]
  progress      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  enrollments   CourseEnrollment[]
  appointments  Appointment[] // e.g., practical sessions
  documents     Document[]
  cpdLogs       CpdLog[]

  @@index([tenantId])
  @@map("students")
}

model MedicalHistory {
  id        String   @id @default(cuid())
  clientId  String
  data      Json
  riskFlags String[]
  version   Int
  createdAt DateTime @default(now())

  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@map("medical_histories")
}

// ==========================================
// APPOINTMENTS & SCHEDULING
// ==========================================

enum AppointmentStatus {
  PENDING_DEPOSIT
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model Appointment {
  id             String            @id @default(cuid())
  tenantId       String
  clientId       String?
  studentId      String?
  practitionerId String
  serviceId      String
  locationId     String
  startTs        DateTime
  endTs          DateTime
  status         AppointmentStatus
  notes          String?
  policyVersion  Int               @default(1)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  tenant         Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  client         Client?           @relation(fields: [clientId], references: [id], onDelete: SetNull)
  student        Student?          @relation(fields: [studentId], references: [id], onDelete: SetNull)
  practitioner   Practitioner      @relation(fields: [practitionerId], references: [id], onDelete: Restrict)
  service        Service           @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  location       Location          @relation(fields: [locationId], references: [id], onDelete: Restrict)
  payments       Payment[]
  documents      Document[]

  @@index([tenantId, startTs])
  @@index([practitionerId])
  @@map("appointments")
}

// ==========================================
// COURSES & LMS
// ==========================================

model Course {
  id                  String   @id @default(cuid())
  tenantId            String
  title               String
  slug                String
  description         String?
  price               Int      // Price in cents
  durationHours       Int
  maxStudents         Int?
  curriculum          Json     @default("{}") // Modules per JCCP levels
  prerequisites       Json     @default("[]")
  certificateTemplate Json?
  isActive            Boolean  @default(true)
  ofqualLevel         Int?     // 4-7
  compliance          Json     @default("{}") // JCCP alignment
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  enrollments         CourseEnrollment[]
  certificates        Certificate[]

  @@unique([tenantId, slug])
  @@index([tenantId])
  @@map("courses")
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model CourseEnrollment {
  id               String           @id @default(cuid())
  tenantId         String
  studentId        String
  courseId         String
  status           EnrollmentStatus
  progress         Json             @default("{}")
  completedAt      DateTime?
  certificateIssued Boolean         @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  tenant           Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course           Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  payments         Payment[]

  @@unique([tenantId, studentId, courseId])
  @@index([tenantId])
  @@map("course_enrollments")
}

model AssessmentAttempt {
  id           String   @id @default(cuid())
  userId       String
  assessmentId String   // External assessment ID
  answers      Json     @default("{}")
  score        Int
  totalScore   Int
  passed       Boolean  @default(false)
  timeSpent    Int      // minutes
  startedAt    DateTime @default(now())
  completedAt  DateTime?

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assessment_attempts")
}

model Certificate {
  id                String   @id @default(cuid())
  tenantId          String
  studentId         String
  courseId          String
  certificateNumber String   @unique
  issuedAt          DateTime @default(now())
  expiresAt         DateTime?
  pdfUrl            String?
  metadata          Json?

  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  student           Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("certificates")
}

model CpdLog {
  id           String   @id @default(cuid())
  tenantId     String
  studentId    String
  activityType String
  hours        Float
  evidence     Json
  verified     Boolean  @default(false)
  date         DateTime
  createdAt    DateTime @default(now())

  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([tenantId, studentId])
  @@map("cpd_logs")
}

// ==========================================
// PAYMENTS
// ==========================================

enum PaymentStatus {
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

model Payment {
  id             String        @id @default(cuid())
  tenantId       String
  appointmentId  String?
  enrollmentId   String?
  stripePiId     String?       @unique
  amountCents    Int
  currency       String        @default("gbp")
  status         PaymentStatus
  depositCents   Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  appointment    Appointment?  @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  enrollment     CourseEnrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@map("payments")
}

// ==========================================
// DOCUMENTS & TEMPLATES
// ==========================================

model Template {
  id               String    @id @default(cuid())
  tenantId         String?   // null = global template
  type             String    // consent, aftercare, policy, certificate
  jurisdiction     String    // e.g., UK
  version          String
  content          Json      // blocks with placeholders
  mandatoryBlocks  String[]
  effectiveFrom    DateTime
  effectiveTo      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  tenant           Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  documents        Document[]

  @@index([type, jurisdiction])
  @@map("templates")
}

model Document {
  id         String    @id @default(cuid())
  tenantId   String
  clientId   String?
  studentId  String?
  type       String
  content    Json
  version    String
  locked     Boolean   @default(false)
  signedAt   DateTime?
  expiresAt  DateTime?
  stampHash  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  student    Student?  @relation(fields: [studentId], references: [id], onDelete: SetNull)
  user       User?     @relation(fields: [clientId], references: [id], onDelete: SetNull)
  template   Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  templateId String?
  appointmentId String?
  esignSessions EsignSession[]

  @@index([tenantId])
  @@map("documents")
}

model EsignSession {
  id         String   @id @default(cuid())
  documentId String
  clientId   String?
  studentId  String?
  status     String   // created, sent, signed, void
  envelope   Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("esign_sessions")
}

// ==========================================
// MARKETING & COMMUNICATIONS
// ==========================================

model Campaign {
  id         String    @id @default(cuid())
  tenantId   String
  type       String
  content    Json
  scheduleTs DateTime?
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages   Message[]

  @@index([tenantId])
  @@map("campaigns")
}

model Message {
  id           String    @id @default(cuid())
  tenantId     String
  campaignId   String?
  channel      String    // email, sms, whatsapp
  toRef        String    // email address, phone number
  templateId   String?
  payload      Json
  status       String    // queued, sent, delivered, failed
  error        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  campaign     Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  @@index([status])
  @@map("messages")
}

// ==========================================
// AUDIT & EVENTS
// ==========================================

model Event {
  id         String   @id @default(cuid())
  tenantId   String
  actorId    String?
  type       String
  payload    Json
  occurredAt DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  actor      User?    @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@index([tenantId, type])
  @@map("events")
}
